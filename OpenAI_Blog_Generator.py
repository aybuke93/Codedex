#visit link: https://www.codedex.io/projects/generate-a-blog-with-openai
import openai
## We installed python-dotenv to hide our KEY. python-dotenv is a package that allows us to create and
## use environment variables without having to set them in the operating system manually.
## Environment variables are variables whose values are set outside the program, typically in the operating system
from dotenv import dotenv_values
config = dotenv_values(".env")
# The dotenv_values() will take in the path to the .env file and return us 
# a dictionary with all the variables in the .env file. We then created a config variable to hold that dictionary.

openai.api_key = config['API_KEY']

# Following is the bulk of our function and where we use GPT-3.
# We created a variable called "response" to store the response generated by the output of the completions
# .create() method call in our openai module.
def generate_blog(paragraph_topic):
  response = openai.completions.create(
    model = 'gpt-3.5-turbo-instruct',
    prompt = 'Write a paragraph about the following topic. ' + paragraph_topic,
    max_tokens = 400,
    temperature = 0.3
  )
  retrieve_blog = response.choices[0].text
  return retrieve_blog

#print(generate_blog('Why NYC is better than your city.'))

#Let's add some additional code to generate as many paragraphs as we want, with each paragraph discussing a different topic:
keep_writing = True

while keep_writing:
  answer = input('Write a paragraph? Y for yes, anything else for no. ')
  if (answer == 'Y'):
    paragraph_topic = input('What should this paragraph talk about? ')
    print(generate_blog(paragraph_topic))
  else:
    keep_writing = False



#Note: If you want to push your code to GitHub, you don't want to push the .env file as well. In the root directory of your project,
#  create a file called .gitignore, and in the Git ignore file, type in .env. 
# This will prevent the file from being tracked by Git and ultimately pushed to GitHub.